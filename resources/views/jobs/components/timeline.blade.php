{{-- Timeline Section for resources/views/jobs/components/timeline.blade.php --}}

<!-- Timeline Section -->
<div class="timeline-section">
    <div class="card">
        <div class="card-header">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <i class="fas fa-chart-gantt me-2"></i>Project Timeline
                </h5>
                <div class="d-flex gap-2">
                    <button class="btn btn-outline-primary btn-sm" onclick="refreshTimeline()">
                        <i class="fas fa-sync-alt"></i> Refresh
                    </button>
                </div>
            </div>
        </div>

        <div class="card-body">
            <!-- Project Overview -->
            <div class="project-overview mb-4">
                <div class="row">
                    <div class="col-md-8">
                        <h6 class="fw-bold">Job #{{ $job->id }} - {{ $job->jobType->name }}</h6>
                        <div class="job-meta">
                            @if($job->start_date && $job->due_date)
                                <span class="badge bg-info me-2">
                                    <i class="fas fa-calendar me-1"></i>
                                    {{ $job->start_date->format('M d') }} - {{ $job->due_date->format('M d, Y') }}
                                </span>
                            @else
                                <span class="badge bg-warning me-2">
                                    <i class="fas fa-exclamation-triangle me-1"></i>
                                    No dates set
                                </span>
                            @endif

                            @php
                                $statusColors = [
                                    'pending' => 'warning',
                                    'in_progress' => 'primary',
                                    'completed' => 'success',
                                    'cancelled' => 'danger'
                                ];
                            @endphp
                            <span class="badge bg-{{ $statusColors[$job->status] ?? 'secondary' }}">
                                {{ ucfirst(str_replace('_', ' ', $job->status)) }}
                            </span>
                        </div>
                    </div>
                    <div class="col-md-4 text-end">
                        <div class="progress-circle">
                            <div class="progress-text">{{ $jobStats['overall_progress'] }}%</div>
                        </div>
                    </div>
                </div>
            </div>

            @if($timelineData['tasks'] && count($timelineData['tasks']) > 0)
                <!-- Date Range Controls -->
                <div class="date-controls mb-3">
                    <div class="row align-items-center">
                        <div class="col-md-6">
                            <div class="d-flex gap-2 align-items-center">
                                <label class="form-label mb-0 fw-bold">View:</label>
                                <input type="date" class="form-control form-control-sm" id="startDate"
                                       value="{{ $job->start_date ? $job->start_date->format('Y-m-d') : date('Y-m-d') }}" style="width: auto;">
                                <span class="text-muted">to</span>
                                <input type="date" class="form-control form-control-sm" id="endDate"
                                       value="{{ $job->due_date ? $job->due_date->format('Y-m-d') : date('Y-m-d', strtotime('+30 days')) }}" style="width: auto;">
                                <button class="btn btn-primary btn-sm" onclick="updateDateRange()">Update</button>
                            </div>
                        </div>
                        <div class="col-md-6 text-end">
                            <div class="btn-group btn-group-sm">
                                <button class="btn btn-outline-secondary" onclick="setQuickRange('week')">This Week</button>
                                <button class="btn btn-outline-secondary" onclick="setQuickRange('month')">This Month</button>
                                <button class="btn btn-outline-secondary active" onclick="setQuickRange('job')">Full Job</button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Timeline Chart -->
                <div class="timeline-chart">
                    <div class="timeline-header">
                        <div class="timeline-labels">Tasks</div>
                        <div class="timeline-dates" id="timelineDates">
                            <!-- Dates generated by JS -->
                        </div>
                    </div>

                    <!-- Task Rows -->
                    @foreach($timelineData['tasks'] as $task)
                        <div class="timeline-row" onclick="selectTask({{ $task['id'] }})" data-task-id="{{ $task['id'] }}">
                            <div class="task-label">
                                <div class="task-info">
                                    @php
                                        $statusIcons = [
                                            'completed' => 'fas fa-check-circle text-success',
                                            'in_progress' => 'fas fa-play-circle text-primary',
                                            'pending' => 'fas fa-clock text-warning',
                                            'cancelled' => 'fas fa-times-circle text-danger'
                                        ];
                                    @endphp
                                    <i class="{{ $statusIcons[$task['status']] ?? 'fas fa-circle text-secondary' }} me-2"></i>
                                    <div>
                                        <div class="task-name">{{ $task['name'] }}</div>
                                        <div class="task-employees">
                                            {{ implode(', ', array_column($task['employees']->toArray(), 'name')) }}
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="task-timeline">
                                @php
                                    $barClass = match($task['status']) {
                                        'completed' => 'task-completed',
                                        'in_progress' => 'task-progress',
                                        'pending' => 'task-pending',
                                        default => 'task-pending'
                                    };
                                @endphp
                                <div class="task-bar {{ $barClass }}"
                                     data-start="{{ $task['start_date']?->format('Y-m-d') }}"
                                     data-end="{{ $task['end_date']?->format('Y-m-d') }}"
                                     data-progress="{{ $task['progress'] }}">
                                    <div class="task-content">
                                        <span class="task-title">{{ Str::limit($task['name'], 20) }}</span>
                                        @if($task['status'] === 'in_progress' && $task['progress'] > 0)
                                            <div class="progress-fill" style="width: {{ $task['progress'] }}%"></div>
                                        @endif
                                    </div>
                                    @if($task['has_extension_request'])
                                        <div class="extension-badge" title="Extension Requested">
                                            <i class="fas fa-clock"></i>
                                        </div>
                                    @endif
                                </div>
                            </div>
                        </div>
                    @endforeach
                </div>

                <!-- Task Details Panel -->
                <div class="task-details" id="taskDetails" style="display: none;">
                    <div class="row">
                        <div class="col-md-8">
                            <h6 id="taskName">Task Details</h6>
                            <p id="taskDescription" class="text-muted">Select a task to view details</p>

                            <div class="row">
                                <div class="col-md-6">
                                    <strong>Timeline:</strong><br>
                                    <span id="taskDates">-</span>
                                </div>
                                <div class="col-md-6">
                                    <strong>Assigned To:</strong><br>
                                    <span id="taskEmployees">-</span>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4 text-center">
                            <div class="task-progress-circle">
                                <div class="progress-text" id="taskProgress">0%</div>
                            </div>
                            @if(in_array(auth()->user()->userRole->name, ['Engineer', 'Supervisor']))
                                <button class="btn btn-primary btn-sm mt-2" id="editTaskBtn" style="display: none;">
                                    <i class="fas fa-edit"></i> Edit Task
                                </button>
                            @endif
                        </div>
                    </div>
                </div>

            @else
                <!-- No Tasks State -->
                <div class="no-tasks-state">
                    <div class="text-center py-5">
                        <i class="fas fa-tasks text-muted mb-3" style="font-size: 3rem;"></i>
                        <h5 class="text-muted">No Tasks Created Yet</h5>
                        <p class="text-muted mb-4">This job doesn't have any tasks assigned. Create tasks to see the timeline.</p>

                        @if(in_array(auth()->user()->userRole->name, ['Engineer', 'Supervisor']))
                            @if($job->approval_status === 'approved')
                                <a href="{{ route('jobs.tasks.create', $job) }}" class="btn btn-primary">
                                    <i class="fas fa-plus me-2"></i>Add First Task
                                </a>
                            @else
                                <div class="alert alert-info">
                                    <i class="fas fa-info-circle me-2"></i>
                                    Job needs to be approved before tasks can be added.
                                </div>
                            @endif
                        @endif
                    </div>
                </div>
            @endif
        </div>
    </div>
</div>

@section('styles')
<style>
.timeline-section {
    margin-top: 2rem;
}

.project-overview {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 1.5rem;
    border-radius: 10px;
    margin-bottom: 1.5rem;
}

.job-meta {
    margin-top: 0.5rem;
}

.progress-circle {
    width: 80px;
    height: 80px;
    background: conic-gradient(#ffffff {{ $jobStats['overall_progress'] * 3.6 }}deg, rgba(255,255,255,0.3) 0deg);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-left: auto;
}

.progress-circle .progress-text {
    background: rgba(255,255,255,0.2);
    padding: 0.5rem;
    border-radius: 50%;
    font-weight: bold;
    font-size: 0.9rem;
}

.date-controls {
    background: #f8f9fa;
    padding: 1rem;
    border-radius: 8px;
}

.timeline-chart {
    border: 1px solid #dee2e6;
    border-radius: 8px;
    overflow: hidden;
}

.timeline-header {
    display: flex;
    background: #f8f9fa;
    border-bottom: 2px solid #dee2e6;
}

.timeline-labels {
    width: 250px;
    padding: 1rem;
    font-weight: 600;
    border-right: 2px solid #dee2e6;
}

.timeline-dates {
    flex: 1;
    display: flex;
    height: 50px;
}

.date-column {
    flex: 1;
    min-width: 30px;
    padding: 0.5rem 0.25rem;
    text-align: center;
    border-right: 1px solid #f0f0f0;
    font-size: 0.8rem;
}

.date-column.today {
    background: #fff3cd;
    font-weight: bold;
}

.date-column.weekend {
    background: #f8f9fa;
    color: #6c757d;
}

.timeline-row {
    display: flex;
    min-height: 60px;
    border-bottom: 1px solid #f0f0f0;
    cursor: pointer;
    transition: background 0.2s;
}

.timeline-row:hover {
    background: #f8f9fa;
}

.timeline-row.selected {
    background: #e3f2fd;
    border-left: 4px solid #2196f3;
}

.task-label {
    width: 250px;
    padding: 1rem;
    border-right: 2px solid #dee2e6;
    display: flex;
    align-items: center;
}

.task-info {
    display: flex;
    align-items: center;
    width: 100%;
}

.task-name {
    font-weight: 600;
    margin-bottom: 0.25rem;
}

.task-employees {
    font-size: 0.8rem;
    color: #6c757d;
}

.task-timeline {
    flex: 1;
    padding: 1rem;
    position: relative;
}

.task-bar {
    height: 30px;
    border-radius: 15px;
    position: relative;
    overflow: hidden;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.task-completed {
    background: linear-gradient(135deg, #28a745, #20c997);
}

.task-progress {
    background: linear-gradient(135deg, #007bff, #6610f2);
}

.task-pending {
    background: linear-gradient(135deg, #ffc107, #fd7e14);
}

.task-content {
    display: flex;
    align-items: center;
    padding: 0 0.75rem;
    height: 100%;
    color: white;
    font-weight: 600;
    font-size: 0.85rem;
    position: relative;
}

.progress-fill {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    background: rgba(255,255,255,0.3);
    border-radius: 15px;
    transition: width 0.3s ease;
}

.extension-badge {
    position: absolute;
    right: -10px;
    top: 50%;
    transform: translateY(-50%);
    background: #ffc107;
    color: #000;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.7rem;
}

.task-details {
    margin-top: 1.5rem;
    padding: 1.5rem;
    background: #f8f9fa;
    border-radius: 8px;
    border-left: 4px solid #007bff;
}

.task-progress-circle {
    width: 60px;
    height: 60px;
    background: conic-gradient(#007bff 0deg, #e9ecef 0deg);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto;
}

.task-progress-circle .progress-text {
    background: white;
    padding: 0.5rem;
    border-radius: 50%;
    font-weight: bold;
    font-size: 0.8rem;
}

.no-tasks-state {
    text-align: center;
    padding: 3rem 1rem;
}

.today-marker {
    position: absolute;
    top: 0;
    bottom: 0;
    width: 2px;
    background: #dc3545;
    z-index: 10;
}

.today-marker::before {
    content: 'Today';
    position: absolute;
    top: -20px;
    left: -15px;
    background: #dc3545;
    color: white;
    padding: 2px 6px;
    border-radius: 3px;
    font-size: 0.7rem;
    font-weight: bold;
}
</style>
@endsection

<script>
let selectedTaskId = null;
const jobId = {{ $job->id }};
const tasksData = @json($timelineData['tasks']->keyBy('id') ?? []);

document.addEventListener('DOMContentLoaded', function() {
    @if(count($timelineData['tasks']) > 0)
        initTimeline();
    @endif
});

function initTimeline() {
    generateDates();
    positionTasks();
    addTodayMarker();
}

function generateDates() {
    const container = document.getElementById('timelineDates');
    if (!container) return;

    const startDate = new Date(document.getElementById('startDate').value);
    const endDate = new Date(document.getElementById('endDate').value);
    const today = new Date();

    container.innerHTML = '';
    let current = new Date(startDate);

    while (current <= endDate) {
        const col = document.createElement('div');
        col.className = 'date-column';

        const day = current.getDate();
        const month = current.toLocaleDateString('en', { month: 'short' });

        if (current.toDateString() === today.toDateString()) {
            col.classList.add('today');
        }
        if (current.getDay() === 0 || current.getDay() === 6) {
            col.classList.add('weekend');
        }

        col.innerHTML = `<div style="font-size: 0.7rem; color: #6c757d;">${month}</div><div>${day}</div>`;
        container.appendChild(col);

        current.setDate(current.getDate() + 1);
    }
}

function positionTasks() {
    const startDate = new Date(document.getElementById('startDate').value);
    const endDate = new Date(document.getElementById('endDate').value);
    const totalDays = Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24)) + 1;

    document.querySelectorAll('.task-bar').forEach(bar => {
        const taskStart = bar.dataset.start ? new Date(bar.dataset.start) : null;
        const taskEnd = bar.dataset.end ? new Date(bar.dataset.end) : null;

        if (!taskStart || !taskEnd) {
            bar.style.width = '100px';
            bar.style.left = '0px';
            return;
        }

        const startOffset = Math.max(0, Math.ceil((taskStart - startDate) / (1000 * 60 * 60 * 24)));
        const duration = Math.ceil((taskEnd - taskStart) / (1000 * 60 * 60 * 24)) + 1;

        const leftPercent = (startOffset / totalDays) * 100;
        const widthPercent = (duration / totalDays) * 100;

        bar.style.left = leftPercent + '%';
        bar.style.width = Math.max(widthPercent, 10) + '%';
        bar.style.position = 'absolute';
    });
}

function addTodayMarker() {
    const startDate = new Date(document.getElementById('startDate').value);
    const endDate = new Date(document.getElementById('endDate').value);
    const today = new Date();

    document.querySelectorAll('.today-marker').forEach(m => m.remove());

    if (today >= startDate && today <= endDate) {
        const totalDays = Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24)) + 1;
        const dayOffset = Math.ceil((today - startDate) / (1000 * 60 * 60 * 24));
        const leftPercent = (dayOffset / totalDays) * 100;

        document.querySelectorAll('.task-timeline').forEach(timeline => {
            const marker = document.createElement('div');
            marker.className = 'today-marker';
            marker.style.left = leftPercent + '%';
            timeline.appendChild(marker);
        });
    }
}

function selectTask(taskId) {
    // Remove previous selection
    document.querySelectorAll('.timeline-row').forEach(row => {
        row.classList.remove('selected');
    });

    // Select current row
    document.querySelector(`[data-task-id="${taskId}"]`).classList.add('selected');
    selectedTaskId = taskId;

    // Load task details
    fetch(`/jobs/${jobId}/tasks/${taskId}/details`)
        .then(response => response.json())
        .then(data => showTaskDetails(data))
        .catch(error => console.error('Error:', error));
}

function showTaskDetails(data) {
    const panel = document.getElementById('taskDetails');
    const task = data.task;

    document.getElementById('taskName').textContent = task.name;
    document.getElementById('taskDescription').textContent = task.description || 'No description';
    document.getElementById('taskProgress').textContent = task.progress + '%';

    // Update dates
    if (data.employees.length > 0) {
        const emp = data.employees[0];
        document.getElementById('taskDates').textContent =
            `${emp.start_date || 'Not set'} - ${emp.end_date || 'Not set'}`;
        document.getElementById('taskEmployees').textContent =
            data.employees.map(e => e.name).join(', ');
    }

    // Update progress circle
    const circle = document.querySelector('.task-progress-circle');
    const degrees = (task.progress / 100) * 360;
    circle.style.background = `conic-gradient(#007bff ${degrees}deg, #e9ecef 0deg)`;

    // Show edit button
    const editBtn = document.getElementById('editTaskBtn');
    if (editBtn) {
        editBtn.style.display = 'block';
        editBtn.onclick = () => window.location.href = `/jobs/${jobId}/tasks/${task.id}/edit`;
    }

    panel.style.display = 'block';
}

function updateDateRange() {
    initTimeline();
}

function setQuickRange(type) {
    const startInput = document.getElementById('startDate');
    const endInput = document.getElementById('endDate');
    const today = new Date();

    // Update button states
    document.querySelectorAll('.btn-group .btn').forEach(btn => btn.classList.remove('active'));
    event.target.classList.add('active');

    switch(type) {
        case 'week':
            const weekStart = new Date(today);
            weekStart.setDate(today.getDate() - today.getDay());
            const weekEnd = new Date(weekStart);
            weekEnd.setDate(weekStart.getDate() + 6);
            startInput.value = weekStart.toISOString().split('T')[0];
            endInput.value = weekEnd.toISOString().split('T')[0];
            break;
        case 'month':
            const monthStart = new Date(today.getFullYear(), today.getMonth(), 1);
            const monthEnd = new Date(today.getFullYear(), today.getMonth() + 1, 0);
            startInput.value = monthStart.toISOString().split('T')[0];
            endInput.value = monthEnd.toISOString().split('T')[0];
            break;
        case 'job':
            startInput.value = '{{ $job->start_date ? $job->start_date->format('Y-m-d') : date('Y-m-d') }}';
            endInput.value = '{{ $job->due_date ? $job->due_date->format('Y-m-d') : date('Y-m-d', strtotime('+30 days')) }}';
            break;
    }

    initTimeline();
}

function refreshTimeline() {
    fetch(`/jobs/${jobId}/timeline-data`)
        .then(response => response.json())
        .then(data => {
            location.reload(); // Simple reload for now
        })
        .catch(error => console.error('Error:', error));
}
</script>
